use teloxide::{prelude::*, update_listeners::webhooks};
use teloxide::update_listeners::webhooks::Options;
use teloxide::types::InputFile;
use std::net::SocketAddr;
use std::path::Path;
use teloxide::types::InlineKeyboardButton;
use teloxide::types::InlineKeyboardMarkup;
use std::env;
use dotenv::dotenv;
use std::collections::HashMap;
use teloxide::types::MessageId;
use teloxide::error_handlers::LoggingErrorHandler;
use teloxide::dispatching::UpdateHandler;
use url::Url;

type ChatState = HashMap<ChatId , Vec<MessageId>>;

#[tokio::main]
async fn main() {
    dotenv().ok();
    pretty_env_logger::init();

    log::info!("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å webhook...");

    let bot = Bot::from_env();

    let addr = SocketAddr::from(([0, 0, 0, 0], 8080));
    let url = Url::parse(&env::var("WEBHOOK_URL").expect("WEBHOOK_URL must be set")).unwrap();

    let listener = webhooks::axum(bot.clone(), Options::new(addr, url)).await.unwrap();

    let handler: UpdateHandler<teloxide::RequestError> = dptree::entry()
    .branch(Update::filter_message().endpoint(message_handler))
    .branch(Update::filter_callback_query().endpoint(callback_handler));

    Dispatcher::builder(bot, handler)
    .enable_ctrlc_handler()
    .build()
    .dispatch_with_listener(listener, LoggingErrorHandler::with_custom_text("–û—à–∏–±–∫–∞ –≤ –±–æ—Ç–µ"))
    .await;
}

fn main_keyboard() -> InlineKeyboardMarkup {
    InlineKeyboardMarkup::new(vec![
        vec![
            InlineKeyboardButton::callback("üìï –£–ø—Ä–∞–≤–ª—è–π –∏–ª–∏ –ø–æ–¥—á–∏–Ω—è–π—Å—è", "book1"),
            InlineKeyboardButton::callback("üìô –ö–æ–¥ –î–µ–Ω–µ–≥", "book2"),
        ],
        vec![
            InlineKeyboardButton::callback("‚ÑπÔ∏è –û –ø—Ä–æ–µ–∫—Ç–µ", "about_project"),
        ],
    ])
}

fn back_keyboard() -> InlineKeyboardMarkup {
    InlineKeyboardMarkup::new(vec![
        vec![InlineKeyboardButton::callback("üîô –ù–∞–∑–∞–¥", "back")],
    ])
}

async fn message_handler(
    bot: Bot,
    msg: Message,
    state: std::sync::Arc<tokio::sync::Mutex<ChatState>>,
) -> ResponseResult<()> {
    if let Some(text) = msg.text() {
        if text == "/start" {
            let mut state = state.lock().await;

            // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            if let Some(ids) = state.get(&msg.chat.id) {
                for &id in ids {
                    let _ = bot.delete_message(msg.chat.id, id).await;
                }
            }
            state.insert(msg.chat.id, Vec::new());

            // –ö–Ω–æ–ø–∫–∞ "–ü–µ—Ä–µ–π—Ç–∏ –∫ –∫–Ω–∏–≥–∞–º"
            let keyboard = InlineKeyboardMarkup::new(vec![vec![
                InlineKeyboardButton::callback("üìÇ –ü–µ—Ä–µ–π—Ç–∏ –∫ –∫–Ω–∏–≥–∞–º", "ready"),
            ]]);

            // –¢–µ–∫—Å—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
            let welcome_caption = "<b>–ü—Ä–∏–≤–µ—Ç, –¥—Ä—É–≥!</b>\n\
–¢—ã –æ–∫–∞–∑–∞–ª—Å—è –≤ ReMind-–∞—Ä—Ö–∏–≤–µ ‚Äî –º–µ—Å—Ç–µ, –≥–¥–µ –º—ã —Å–æ–±–∏—Ä–∞–µ–º –∫–Ω–∏–≥–∏, –∏—Å—á–µ–∑–Ω—É–≤—à–∏–µ —Å –ø–æ–ª–æ–∫, –Ω–æ –Ω–µ –∏–∑ –ø–∞–º—è—Ç–∏.\n\n\
<b>–í —ç—Ç–æ–º –±–æ—Ç–µ —Ç—ã —Å–º–æ–∂–µ—à—å:</b>\n\
1. <b>–ü—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ —Å–≤–æ—é –∫–Ω–∏–≥—É.</b> –ù–µ –ø–æ –∂–∞–Ω—Ä—É. –ù–µ –ø–æ —Ç—Ä–µ–Ω–¥—É. –ê –ø–æ –æ—â—É—â–µ–Ω–∏—é.\n\
2. <b>–û—Ç–∫—Ä–æ–π —Ç–æ, —á—Ç–æ –ø—Ä—è—á—É—Ç.</b> –ú—ã —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ —É–¥–∞–ª–∏–ª–∏, –∑–∞–±—ã–ª–∏ –∏–ª–∏ –ø—ã—Ç–∞–ª–∏—Å—å —Å–ø—Ä—è—Ç–∞—Ç—å.\n\n\
–ù–∞–∂–∏–º–∞–π –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏ –Ω–∞—Å–ª–∞–∂–¥–∞–π—Å—è –∫–Ω–∏–≥–∞–º–∏ ‚¨áÔ∏è";

            // –ü—É—Ç—å –∫ –∫–∞—Ä—Ç–∏–Ω–∫–µ
            let banner_path = Path::new("assets/welcome.jpg");

            if banner_path.exists() {
                let photo = InputFile::file(banner_path);
                let sent_msg = bot
                    .send_photo(msg.chat.id, photo)
                    .caption(welcome_caption)
                    .parse_mode(teloxide::types::ParseMode::Html)
                    .reply_markup(keyboard)
                    .await?;

                state.get_mut(&msg.chat.id).unwrap().push(sent_msg.id);
            } else {
                let fallback = bot
                    .send_message(msg.chat.id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! (–Ω–æ –±–∞–Ω–Ω–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω)")
                    .reply_markup(keyboard)
                    .await?;

                state.get_mut(&msg.chat.id).unwrap().push(fallback.id);
            }
        }
    }
    Ok(())
}

async fn callback_handler(
    bot: Bot,
    q: CallbackQuery,
    state: std::sync::Arc<tokio::sync::Mutex<ChatState>>,
) -> ResponseResult<()> {
    let chat_id = q.message.as_ref().unwrap().chat.id;
    let mut state = state.lock().await;

    // –£–¥–∞–ª—è–µ–º –≤—Å–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    if let Some(ids) = state.get(&chat_id) {
        for &id in ids {
            let _ = bot.delete_message(chat_id, id).await;
        }
    }
    state.insert(chat_id, Vec::new());

    if let Some(data) = q.data {
        match data.as_str() {
            "ready" => {
                bot.answer_callback_query(q.id).await?;
                let sent_msg = bot.send_message(chat_id, "üìÇ –í–æ—Ç —Ç–æ, —á—Ç–æ –º—ã —Å–º–æ–≥–ª–∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å:")
                    .reply_markup(main_keyboard())
                    .await?;
                state.get_mut(&chat_id).unwrap().push(sent_msg.id);
            }
            "back" => {
                bot.answer_callback_query(q.id).await?;
                let sent_msg = bot.send_message(chat_id, "üìÇ –í–æ—Ç —Ç–æ, —á—Ç–æ –º—ã —Å–º–æ–≥–ª–∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å:")
                    .reply_markup(main_keyboard())
                    .await?;
                state.get_mut(&chat_id).unwrap().push(sent_msg.id);
            }
            "book1" => {
                bot.answer_callback_query(q.id).await?;
                let sent_msg = bot.send_message(chat_id, 
                    "üìï –£–ø—Ä–∞–≤–ª—è–π –∏–ª–∏ –ø–æ–¥—á–∏–Ω—è–π—Å—è\n\
                    ü©∏ –ö–Ω–∏–≥–∞ –ø—Ä–æ –≤–ª–∏—è–Ω–∏–µ, –∫–æ—Ç–æ—Ä—É—é –Ω–µ –Ω–∞–ø–µ—á–∞—Ç–∞—é—Ç –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ\n\n\
                    üìå –ß—Ç–æ –≤–Ω—É—Ç—Ä–∏:\n\
                    ‚Äì 30 –≥–ª–∞–≤ –æ –≤–ª–∞—Å—Ç–∏, –∫–æ–Ω—Ç—Ä–æ–ª–µ –∏ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–π –∏–≥—Ä–µ\n\
                    ‚Äì –¢–µ—Ö–Ω–∏–∫–∏ –≤–ª–∏—è–Ω–∏—è –∏ –º–∞–Ω–∏–ø—É–ª—è—Ü–∏–∏\n\
                    ‚Äì –ö–∞–∫ —É–ø—Ä–∞–≤–ª—è—Ç—å –¥—Ä—É–≥–∏–º–∏, –Ω–µ –ø–æ–¥–Ω–∏–º–∞—è –≥–æ–ª–æ—Å\n\
                    ‚Äì –ö–∞–∫ –Ω–µ —Å—Ç–∞—Ç—å –∂–µ—Ä—Ç–≤–æ–π\n\n\
                    üìÑ –§–æ—Ä–º–∞—Ç: PDF\n\
                    ‚è± –û–±—ä—ë–º: ~150 —Å—Ç—Ä\n\
                    üìõ –û—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ –Ω–µ –ø—É–±–ª–∏–∫–æ–≤–∞–ª–∞—Å—å. –†–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω—è–µ—Ç—Å—è –≤—Ä—É—á–Ω—É—é.")
                    .reply_markup(back_keyboard())
                    .await?;
                state.get_mut(&chat_id).unwrap().push(sent_msg.id);

                let file_path = Path::new("books/–£–ø—Ä–∞–≤–ª—è–π –∏–ª–∏ –ü–æ–¥—á–∏–Ω—è–π—Å—è.pdf");
                if file_path.exists() {
                    let file = InputFile::file(file_path);
                    let sent_file = bot.send_document(chat_id, file)
                        .caption("‚ö†Ô∏è –ù–µ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω—è–π—Ç–µ —Ñ–∞–π–ª")
                        .await?;
                    state.get_mut(&chat_id).unwrap().push(sent_file.id);
                } else {
                    let sent_err = bot.send_message(chat_id, "‚ùå –§–∞–π–ª –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω").await?;
                    state.get_mut(&chat_id).unwrap().push(sent_err.id);
                }
            }
            "book2" => {
                bot.answer_callback_query(q.id).await?;
                let sent_msg = bot.send_message(chat_id, 
              "üìô –ö–æ–¥ –î–µ–Ω–µ–≥\n\
                    üí∞ –≠—Ç—É –∫–Ω–∏–≥—É —É–¥–∞–ª–∏–ª–∏ —Å —Ñ–æ—Ä—É–º–æ–≤. –ü–æ—á–µ–º—É ‚Äî –Ω–µ –≥–æ–≤–æ—Ä—è—Ç.\n\n\
                    üìå –ß—Ç–æ –≤–Ω—É—Ç—Ä–∏:\n\
                    ‚Äì –ü—Å–∏—Ö–æ–ª–æ–≥–∏—è –±–µ–¥–Ω–æ—Å—Ç–∏\n\
                    ‚Äì –§–∏–Ω–∞–Ω—Å–æ–≤–æ–µ –º—ã—à–ª–µ–Ω–∏–µ –±–æ–≥–∞—Ç—ã—Ö\n\
                    ‚Äì –ü—Ä–∏–º–µ—Ä—ã –æ—Ç –Ω—É–ª—è –¥–æ –ø–µ—Ä–≤–æ–≥–æ –º–∏–ª–ª–∏–æ–Ω–∞\n\
                    ‚Äì –ö–∞–∫ —Ç–≤–æ–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —É–ø—Ä–∞–≤–ª—è—é—Ç —Ç–≤–æ–∏–º —Å—á—ë—Ç–æ–º\n\n\
                    üìÑ –§–æ—Ä–º–∞—Ç: PDF\n\
                    ‚è± –û–±—ä—ë–º: ~70 —Å—Ç—Ä\n\
                    üìõ –ù–µ –¥–ª—è –ø—É–±–ª–∏—á–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞. –¢–æ–ª—å–∫–æ –∑–¥–µ—Å—å."
                   )
                    .reply_markup(back_keyboard())
                    .await?;
                state.get_mut(&chat_id).unwrap().push(sent_msg.id);

                let file_path = Path::new("books/–ö–æ–¥ –î–µ–Ω–µ–≥.pdf");
                if file_path.exists() {
                    let file = InputFile::file(file_path);
                    let sent_file = bot.send_document(chat_id, file)
                        .caption("‚ö†Ô∏è –¢–æ–ª—å–∫–æ –¥–ª—è –ª–∏—á–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è")
                        .await?;
                    state.get_mut(&chat_id).unwrap().push(sent_file.id);
                } else {
                    let sent_err = bot.send_message(chat_id, "‚ùå –§–∞–π–ª –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω").await?;
                    state.get_mut(&chat_id).unwrap().push(sent_err.id);
                }
            }
            "about_project" => {
                bot.answer_callback_query(q.id).await?;
                let sent_msg = bot.send_message(chat_id, 
                    "–ï—Å—Ç—å –∫–Ω–∏–≥–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –Ω–∞–π—Ç–∏ –≤ –º–∞–≥–∞–∑–∏–Ω–∞—Ö.
                    –ò—Ö –Ω–µ—Ç –Ω–∞ –ø–æ–ª–∫–∞—Ö, –Ω–µ—Ç –≤ —Ä–µ–∫–ª–∞–º–µ, –Ω–µ—Ç –≤ –ø–æ–∏—Å–∫–µ.
                    –û–Ω–∏ –∏—Å—á–µ–∑–∞—é—Ç. –ò—Ö —É–¥–∞–ª—è—é—Ç.
                    –ò–Ω–æ–≥–¥–∞ ‚Äî –ø–æ—Ç–æ–º—É —á—Ç–æ –æ–Ω–∏ –æ–ø–∞—Å–Ω—ã. –ò–Ω–æ–≥–¥–∞ ‚Äî –ø–æ—Ç–æ–º—É —á—Ç–æ —Å–ª–∏—à–∫–æ–º —á–µ—Å—Ç–Ω—ã.
                    –ê –∏–Ω–æ–≥–¥–∞ ‚Äî –ø–æ—Ç–æ–º—É —á—Ç–æ –∫—Ç–æ-—Ç–æ —Ä–µ—à–∏–ª, —á—Ç–æ —Ç—ã –Ω–µ –¥–æ–ª–∂–µ–Ω –∏—Ö —á–∏—Ç–∞—Ç—å.

                    –≠—Ç–æ—Ç –ø—Ä–æ–µ–∫—Ç ‚Äî –Ω–µ –ø—Ä–æ—Å—Ç–æ –±–∏–±–ª–∏–æ—Ç–µ–∫–∞.
                    –≠—Ç–æ –∞—Ä—Ö–∏–≤ –∏–∑ —Ç–µ–Ω–µ–π.
                    –ú—ã —Å–æ–±–∏—Ä–∞–µ–º, –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–Ω–∏–≥–∏, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã—á–∏—â–∞—é—Ç –∏–∑ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞.
                    –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã. –ù–µ–∫–æ—Ç–æ—Ä—ã–µ ‚Äî –∑–∞–ø—Ä–µ—â–µ–Ω—ã. –ù–µ–∫–æ—Ç–æ—Ä—ã–µ ‚Äî –Ω–∏–∫–æ–≥–¥–∞ –∏ –Ω–µ –¥–æ–ª–∂–Ω—ã –±—ã–ª–∏ –ø–æ—è–≤–∏—Ç—å—Å—è –≤ –æ—Ç–∫—Ä—ã—Ç–æ–º –¥–æ—Å—Ç—É–ø–µ.

                    –ö–∞–∂–¥–∞—è –∫–Ω–∏–≥–∞ –∑–¥–µ—Å—å ‚Äî —ç—Ç–æ –Ω–µ –ø—Ä–æ—Å—Ç–æ PDF.
                    –≠—Ç–æ –∑–Ω–∞–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã–∂–∏–ª–æ.
                    –ó–Ω–∞–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –º–æ–∂–µ—Ç –∏–∑–º–µ–Ω–∏—Ç—å –º—ã—à–ª–µ–Ω–∏–µ, —Å–ª–æ–º–∞—Ç—å —Å—Ç–∞—Ä—ã–µ —Ä–∞–º–∫–∏ –∏ –ø–æ–∫–∞–∑–∞—Ç—å —Ç–æ, —á—Ç–æ –æ–±—ã—á–Ω–æ —Å–∫—Ä—ã–≤–∞—é—Ç.

                    üìÖ –ú—ã –¥–æ–±–∞–≤–ª—è–µ–º –æ–¥–Ω—É –Ω–æ–≤—É—é –∫–Ω–∏–≥—É –∫–∞–∂–¥—É—é –Ω–µ–¥–µ–ª—é.
                    –û–Ω–∞ –ø–æ—è–≤–ª—è–µ—Ç—Å—è –∑–¥–µ—Å—å ‚Äî —Ç–∏—Ö–æ, –±–µ–∑ —Ä–µ–∫–ª–∞–º—ã, –±–µ–∑ —à—É–º–∞.
                    –ò –µ—Å–ª–∏ —Ç—ã —á–∏—Ç–∞–µ—à—å —ç—Ç–æ ‚Äî —Ç—ã —É—Å–ø–µ–ª. –ü–æ–∫–∞ –Ω–µ —Å—Ç–∞–ª–æ –ø–æ–∑–¥–Ω–æ.

                    –ü–æ–¥–ø–∏—Å—ã–≤–∞–π—Å—è –Ω–∞ –Ω–∞—à –æ—Ç–∫—Ä—ã—Ç—ã–π –∫–∞–Ω–∞–ª, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ –∫–Ω–∏–≥–∏.
                    –ú—ã –Ω–µ –æ–±–µ—â–∞–µ–º, —á—Ç–æ –æ–Ω–∏ –±—É–¥—É—Ç –≤—Å–µ–≥–¥–∞.
                    –ù–æ –ø–æ–∫–∞ –º—ã –∑–¥–µ—Å—å ‚Äî –æ–Ω–∏ –±—É–¥—É—Ç –ø–æ—è–≤–ª—è—Ç—å—Å—è.
                    üîó @Remind_ofc")
                    .reply_markup(back_keyboard())
                    .await?;
                state.get_mut(&chat_id).unwrap().push(sent_msg.id);
            }
            _ => {}
        }
    }
    Ok(())
}